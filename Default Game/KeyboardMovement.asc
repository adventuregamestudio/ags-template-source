// Main script for module 'KeyboardMovement'

// keycodes as variables for future key customization functions (static variables?):
int KeyboardMovement_KeyDown = 380; // down arrow
int KeyboardMovement_KeyLeft = 375; // left arrow
int KeyboardMovement_KeyRight = 377; // right arrow
int KeyboardMovement_KeyUp = 372; // up arrow
int KeyboardMovement_KeyDownRight = 381; // PgDn (numpad)
int KeyboardMovement_KeyUpRight = 373; // PgUp (numpad)
int KeyboardMovement_KeyDownLeft = 379; // End (numpad)
int KeyboardMovement_KeyUpLeft = 371; // Home (numpad)
int KeyboardMovement_KeyStop = 376; // 5 (numpad)

// stores current keyboard control mode (disabled by default)
KeyboardMovement_Modes KeyboardMovement_Mode = eKeyboardMovement_None;

// stores current walking direction of player character
KeyboardMovement_Directions KeyboardMovement_CurrentDirection = eKeyboardMovement_Stop;

static function KeyboardMovement::SetMode(KeyboardMovement_Modes mode) {
  KeyboardMovement_Mode = mode;
}

function repeatedly_execute() {
  if (IsGamePaused() || KeyboardMovement_Mode != eKeyboardMovement_Pressing || !IsInterfaceEnabled() || !player.on)
  {
    // if game is paused, module or mode disabled, interface disabled or player character hidden, quit function
    return;
  }

  KeyboardMovement_Directions newdirection;

  // get new direction:
  if ((IsKeyPressed(KeyboardMovement_KeyDown) && IsKeyPressed(KeyboardMovement_KeyRight)) || IsKeyPressed(KeyboardMovement_KeyDownRight))
  {
    // if down&right arrows or PgDn (numeric pad) held down, set new direction to Down-Right
    newdirection = eKeyboardMovement_DownRight;
  }
  else if ((IsKeyPressed(KeyboardMovement_KeyUp) && IsKeyPressed(KeyboardMovement_KeyRight)) || IsKeyPressed(KeyboardMovement_KeyUpRight))
  {
    // up&right arrows or PgUp (numpad)
    newdirection = eKeyboardMovement_UpRight;
  }
  else if ((IsKeyPressed(KeyboardMovement_KeyDown) && IsKeyPressed(KeyboardMovement_KeyLeft)) || IsKeyPressed(KeyboardMovement_KeyDownLeft))
  {
    // down&left arrows or End (numpad)
    newdirection = eKeyboardMovement_DownLeft;
  }
  else if ((IsKeyPressed(KeyboardMovement_KeyUp) && IsKeyPressed(KeyboardMovement_KeyLeft)) || IsKeyPressed(KeyboardMovement_KeyUpLeft))
  {
    // up&left arrows or Home (numpad)
    newdirection = eKeyboardMovement_UpLeft;
  }
  else if (IsKeyPressed(KeyboardMovement_KeyDown))
  {
    // down arrow
    newdirection = eKeyboardMovement_Down;
  }
  else if (IsKeyPressed(KeyboardMovement_KeyLeft))
  {
    // left arrow
    newdirection = eKeyboardMovement_Left;
  }
  else if (IsKeyPressed(KeyboardMovement_KeyRight))
  {
    // right arrow
    newdirection = eKeyboardMovement_Right;
  }
  else if (IsKeyPressed(KeyboardMovement_KeyUp))
  {
    // up arrow
    newdirection = eKeyboardMovement_Up;
  }
  else
  {
    // if none of the above held down, set it to stop player character
    newdirection = eKeyboardMovement_Stop;
  }

  if (IsKeyPressed(KeyboardMovement_KeyStop))
  {
    // if 5 (numeric pad) held down, stop player character, regardless of whether some of the above are held down
    newdirection = eKeyboardMovement_Stop;
  }

  // if new direction is different from current direction
  if (newdirection != KeyboardMovement_CurrentDirection)
  { 

    if (newdirection == eKeyboardMovement_Stop)
    {
      // if new direction is the Stop command, stop movement of player character
      player.StopMoving();
    }
    else
    {
       // if new direction is NOT the Stop command
      int dx, dy;

      if (newdirection == eKeyboardMovement_DownRight)
      {
        dx = DISTANCE;
        dy = DISTANCE;
      }
      else if (newdirection == eKeyboardMovement_UpRight)
      {
        dx = DISTANCE;
        dy = -DISTANCE;
      }
      else if (newdirection == eKeyboardMovement_DownLeft)
      {
        dx = -DISTANCE;
        dy = DISTANCE;
      }
      else if (newdirection == eKeyboardMovement_UpLeft)
      {
        dx = -DISTANCE;
        dy = -DISTANCE;
      }
      else if (newdirection == eKeyboardMovement_Down)
      {
        dx = 0;
        dy = DISTANCE;
      }
      else if (newdirection == eKeyboardMovement_Left)
      {
        dx = -DISTANCE;
        dy = 0;
      }
      else if (newdirection == eKeyboardMovement_Right)
      {
        dx = DISTANCE;
        dy = 0;
      }
      else if (newdirection == eKeyboardMovement_Up)
      {
        dx = 0;
        dy = -DISTANCE;
      }

      // walk player character to the new coordinates
      player.WalkStraight(player.x + dx, player.y + dy, eNoBlock);
    }
    
    // update current direction to new direction
    KeyboardMovement_CurrentDirection = newdirection;
  }
}

function on_key_press(int keycode) {
  if (IsGamePaused() || KeyboardMovement_Mode != eKeyboardMovement_Tapping || !IsInterfaceEnabled() || !player.on)
  {
    // if game is paused, module or mode disabled, interface disabled or player character hidden, quit function
    return;
  }

  KeyboardMovement_Directions newdirection;

  // get new direction:
  if (keycode == KeyboardMovement_KeyDownRight)
  {
    newdirection = eKeyboardMovement_DownRight;
  }
  else if (keycode == KeyboardMovement_KeyUpRight)
  {
    newdirection = eKeyboardMovement_UpRight;
  }
  else if (keycode == KeyboardMovement_KeyDownLeft)
  {
    newdirection = eKeyboardMovement_DownLeft;
  }
  else if (keycode == KeyboardMovement_KeyUpLeft)
  {
    newdirection = eKeyboardMovement_UpLeft;
  }
  else if (keycode == KeyboardMovement_KeyDown)
  {
    newdirection = eKeyboardMovement_Down;
  }
  else if (keycode == KeyboardMovement_KeyLeft) 
  {
    newdirection = eKeyboardMovement_Left;
  }
  else if (keycode == KeyboardMovement_KeyRight)
  {
    newdirection = eKeyboardMovement_Right;
  }
  else if (keycode == KeyboardMovement_KeyUp)
  {
    newdirection = eKeyboardMovement_Up;
  }
  else if (keycode == KeyboardMovement_KeyStop)
  {
    newdirection = eKeyboardMovement_Stop;
  }

  // if new direction is different from current direction
  if (newdirection != KeyboardMovement_CurrentDirection)
  {
    if (newdirection == eKeyboardMovement_Stop)
    {
      // if new direction is the Stop command, stop movement of player character
      player.StopMoving(); 
    }
    else
    {
      // if new direction is NOT the Stop command
      int dx, dy;

      if (newdirection == eKeyboardMovement_DownRight)
      {
        dx = DISTANCE;
        dy = DISTANCE;
      }
      else if (newdirection == eKeyboardMovement_UpRight)
      {
        dx = DISTANCE;
        dy = -DISTANCE;
      }
      else if (newdirection == eKeyboardMovement_DownLeft)
      {
        dx = -DISTANCE;
        dy = DISTANCE;
      }
      else if (newdirection == eKeyboardMovement_UpLeft)
      {
        dx = -DISTANCE;
        dy = -DISTANCE;
      }
      else if (newdirection == eKeyboardMovement_Down)
      {
        dx = 0;
        dy = DISTANCE;
      }
      else if (newdirection == eKeyboardMovement_Left)
      {
        dx = -DISTANCE;
        dy = 0;
      }
      else if (newdirection == eKeyboardMovement_Right)
      {
        dx = DISTANCE;
        dy = 0;
      }
      else if (newdirection == eKeyboardMovement_Up)
      {
        dx = 0;
        dy = -DISTANCE;
      }

      // walk player character to the new coordinates
      player.WalkStraight(player.x + dx, player.y + dy, eNoBlock);
    }

    // update current direction to new direction
    KeyboardMovement_CurrentDirection = newdirection;
  }
  else
  {
    // if new direction is same as current direction, stop player character
    player.StopMoving();
    KeyboardMovement_CurrentDirection = eKeyboardMovement_Stop;
  }

}

function on_event(EventType event, int data)
{
  if (event == eEventLeaveRoom) 
  {
    KeyboardMovement_CurrentDirection = eKeyboardMovement_Stop;
  }
}
