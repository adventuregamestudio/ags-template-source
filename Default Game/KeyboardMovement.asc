// Main script for module 'KeyboardMovement'

// stores current keyboard control mode (disabled by default)
KeyboardMovementMode mode = eKeyboardMovementModeNone;

// stores current walking direction of player character
KeyboardMovementDirection direction = eKeyboardMovementStop;

// define a keymap
KeyboardMovementKeymap keymap;

static function KeyboardMovement::SetMode(KeyboardMovementMode newmode) {
  mode = newmode;
}

// set default keys
function game_start()
{
  keymap.KeyDown = eKeyDownArrow;
  keymap.KeyLeft = eKeyLeftArrow;
  keymap.KeyRight = eKeyRightArrow;
  keymap.KeyUp = eKeyUpArrow;
  keymap.KeyDownRight = eKeyPageDown;
  keymap.KeyUpRight = eKeyPageUp;
  keymap.KeyDownLeft = eKeyEnd;
  keymap.KeyUpLeft = eKeyHome;
  keymap.KeyStop = eKeyNumPad5; 
}

function repeatedly_execute()
{
  if (IsGamePaused() || mode != eKeyboardMovementModePressing || !IsInterfaceEnabled() || !player.on)
  {
    return;
  }

  KeyboardMovementDirection newdirection;

  // get new direction:
  if ((IsKeyPressed(keymap.KeyDown) && IsKeyPressed(keymap.KeyRight)) || IsKeyPressed(keymap.KeyDownRight))
  {
    // if down&right arrows or PgDn (numeric pad) held down, set new direction to Down-Right
    newdirection = eKeyboardMovementDownRight;
  }
  else if ((IsKeyPressed(keymap.KeyUp) && IsKeyPressed(keymap.KeyRight)) || IsKeyPressed(keymap.KeyUpRight))
  {
    // up&right arrows or PgUp (numpad)
    newdirection = eKeyboardMovementUpRight;
  }
  else if ((IsKeyPressed(keymap.KeyDown) && IsKeyPressed(keymap.KeyLeft)) || IsKeyPressed(keymap.KeyDownLeft))
  {
    // down&left arrows or End (numpad)
    newdirection = eKeyboardMovementDownLeft;
  }
  else if ((IsKeyPressed(keymap.KeyUp) && IsKeyPressed(keymap.KeyLeft)) || IsKeyPressed(keymap.KeyUpLeft))
  {
    // up&left arrows or Home (numpad)
    newdirection = eKeyboardMovementUpLeft;
  }
  else if (IsKeyPressed(keymap.KeyDown))
  {
    // down arrow
    newdirection = eKeyboardMovementDown;
  }
  else if (IsKeyPressed(keymap.KeyLeft))
  {
    // left arrow
    newdirection = eKeyboardMovementLeft;
  }
  else if (IsKeyPressed(keymap.KeyRight))
  {
    // right arrow
    newdirection = eKeyboardMovementRight;
  }
  else if (IsKeyPressed(keymap.KeyUp))
  {
    // up arrow
    newdirection = eKeyboardMovementUp;
  }
  else
  {
    // if none of the above held down, set it to stop player character
    newdirection = eKeyboardMovementStop;
  }

  if (IsKeyPressed(keymap.KeyStop))
  {
    // if 5 (numeric pad) held down, stop player character, regardless of whether some of the above are held down
    newdirection = eKeyboardMovementStop;
  }

  // if new direction is different from current direction
  if (newdirection != direction)
  { 

    if (newdirection == eKeyboardMovementStop)
    {
      // if new direction is the Stop command, stop movement of player character
      player.StopMoving();
    }
    else
    {
       // if new direction is NOT the Stop command
      int dx, dy;

      if (newdirection == eKeyboardMovementDownRight)
      {
        dx = DISTANCE;
        dy = DISTANCE;
      }
      else if (newdirection == eKeyboardMovementUpRight)
      {
        dx = DISTANCE;
        dy = -DISTANCE;
      }
      else if (newdirection == eKeyboardMovementDownLeft)
      {
        dx = -DISTANCE;
        dy = DISTANCE;
      }
      else if (newdirection == eKeyboardMovementUpLeft)
      {
        dx = -DISTANCE;
        dy = -DISTANCE;
      }
      else if (newdirection == eKeyboardMovementDown)
      {
        dx = 0;
        dy = DISTANCE;
      }
      else if (newdirection == eKeyboardMovementLeft)
      {
        dx = -DISTANCE;
        dy = 0;
      }
      else if (newdirection == eKeyboardMovementRight)
      {
        dx = DISTANCE;
        dy = 0;
      }
      else if (newdirection == eKeyboardMovementUp)
      {
        dx = 0;
        dy = -DISTANCE;
      }

      // walk player character to the new coordinates
      player.WalkStraight(player.x + dx, player.y + dy, eNoBlock);
    }
    
    // update current direction to new direction
    direction = newdirection;
  }
}

function on_key_press(int keycode)
{
  if (IsGamePaused() || mode != eKeyboardMovementModeTapping || !IsInterfaceEnabled() || !player.on)
  {
    return;
  }

  KeyboardMovementDirection newdirection;

  // get new direction:
  if (keycode == keymap.KeyDownRight)
  {
    newdirection = eKeyboardMovementDownRight;
  }
  else if (keycode == keymap.KeyUpRight)
  {
    newdirection = eKeyboardMovementUpRight;
  }
  else if (keycode == keymap.KeyDownLeft)
  {
    newdirection = eKeyboardMovementDownLeft;
  }
  else if (keycode == keymap.KeyUpLeft)
  {
    newdirection = eKeyboardMovementUpLeft;
  }
  else if (keycode == keymap.KeyDown)
  {
    newdirection = eKeyboardMovementDown;
  }
  else if (keycode == keymap.KeyLeft) 
  {
    newdirection = eKeyboardMovementLeft;
  }
  else if (keycode == keymap.KeyRight)
  {
    newdirection = eKeyboardMovementRight;
  }
  else if (keycode == keymap.KeyUp)
  {
    newdirection = eKeyboardMovementUp;
  }
  else if (keycode == keymap.KeyStop)
  {
    newdirection = eKeyboardMovementStop;
  }

  // if new direction is different from current direction
  if (newdirection != direction)
  {
    if (newdirection == eKeyboardMovementStop)
    {
      // if new direction is the Stop command, stop movement of player character
      player.StopMoving(); 
    }
    else
    {
      // if new direction is NOT the Stop command
      int dx, dy;

      if (newdirection == eKeyboardMovementDownRight)
      {
        dx = DISTANCE;
        dy = DISTANCE;
      }
      else if (newdirection == eKeyboardMovementUpRight)
      {
        dx = DISTANCE;
        dy = -DISTANCE;
      }
      else if (newdirection == eKeyboardMovementDownLeft)
      {
        dx = -DISTANCE;
        dy = DISTANCE;
      }
      else if (newdirection == eKeyboardMovementUpLeft)
      {
        dx = -DISTANCE;
        dy = -DISTANCE;
      }
      else if (newdirection == eKeyboardMovementDown)
      {
        dx = 0;
        dy = DISTANCE;
      }
      else if (newdirection == eKeyboardMovementLeft)
      {
        dx = -DISTANCE;
        dy = 0;
      }
      else if (newdirection == eKeyboardMovementRight)
      {
        dx = DISTANCE;
        dy = 0;
      }
      else if (newdirection == eKeyboardMovementUp)
      {
        dx = 0;
        dy = -DISTANCE;
      }

      // walk player character to the new coordinates
      player.WalkStraight(player.x + dx, player.y + dy, eNoBlock);
    }

    // update current direction to new direction
    direction = newdirection;
  }
  else
  {
    // if new direction is same as current direction, stop player character
    player.StopMoving();
    direction = eKeyboardMovementStop;
  }

}

function on_event(EventType event, int data)
{
  if (event == eEventLeaveRoom) 
  {
    direction = eKeyboardMovementStop;
  }
}
