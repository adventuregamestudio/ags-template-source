// main global script file

// called when the game starts, before the first room is loaded
function game_start() 
{
  // setup VerbCoin GUI and buttons
  VerbCoin.RegisterGui(gVerbCoin);
  VerbCoin.RegisterButton(btnLook, eVerbCoinPositionNorth, eModeLookat, "Look at");
  VerbCoin.RegisterButton(btnTalk, eVerbCoinPositionEast, eModeTalkto, "Talk to");
  VerbCoin.RegisterButton(btnInteract, eVerbCoinPositionSouth, eModeInteract, "Use");
  VerbCoin.RegisterButton(btnPickup, eVerbCoinPositionWest, eModePickup, "Pick up");
}

// called on every game cycle, except when the game is blocked
function repeatedly_execute() 
{
}

// called on every game cycle, even when the game is blocked
function repeatedly_execute_always() 
{
}

// called when a key is pressed
function on_key_press(eKeyCode keycode) 
{
  if (IsGamePaused())
  {
    // game paused, so don't react to any keypresses
    keycode = 0;
  }
  else if (keycode == eKeyCtrlQ)
  {
    // Ctrl-Q will quit the game
    QuitGame(1);
  }
  else if (keycode == eKeyF9)
  {
    // F9 will restart the game
    RestartGame();
  }
  else if (keycode == eKeyF12)
  {
    // F12 will save a screenshot to the save game folder
    SaveScreenShot("screenshot.pcx");
  }
  else if (keycode == eKeyCtrlS)
  {
    // Ctrl-S will give the player all defined inventory items
    Debug(0, 0);
  }
  else if (keycode == eKeyCtrlV)
  {
    // Ctrl-V will show game engine version and build date
    Debug(1, 0);
  }
  else if (keycode == eKeyCtrlA)
  {
    // Ctrl-A will show walkable areas
    Debug(2, 0); 
  }
  else if (keycode == eKeyCtrlX)
  {
    // Ctrl-X will let the player teleport to any room
    Debug(3, 0);
  }
}

// called when a mouse button is clicked
function on_mouse_click(MouseButton button)
{
  // all clicks handled by VerbCoin script
}

function dialog_request(int param) {
}

// called when processclick wasn't handled anywhere else
function unhandled_event (int what, int type) 
{
  if (what == 1) // Unhandled events for HOTSPOTS
  {
    if (type == 1) // look
    {
      player.Say("I see nothing special about it.");
    }
    else if (type == 2) // interact
    {
      player.Say("I can't do anything with it.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("That won't do anything.");
    }
    else if (type == 4) // talk to
    {
      player.Say("I don't think it's going to talk back.");
    }
    else if (type == 7) // pick up
    {
      player.Say("I'm not sure I should be taking it.");
    }
  }
  else if (what == 2) // Unhandled events for OBJECTS
  {
    if (type == 0) // look
    {
      player.Say("Looks alright.");
    }
    else if (type == 1) // interact
    {
      player.Say("I'm not sure how to use it.");
    }
    else if (type == 2) // talk to
    {
      player.Say("I don't think it's going to answer me.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("That's a funny idea.");
    }
    else if (type == 5) // pick up
    {
      player.Say("I don't want to have it.");
    }
  }
  else if (what == 3) // Unhandled events for CHARACTERS
  {
    if (type == 0) // look
    {
      player.Say("Hm.");
    }
    else if (type == 1) // interact
    {
      player.Say("Eh?");
    }
    else if (type == 2) // talk to
    {
      player.Say("Got nothing to say.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("I don't think I should give that away.");
    }
    else if (type == 5) // pick up
    {
      player.Say("I'm not sure they would be compliant.");
    }
  }
  else if (what == 5) // Unhandled events for INVENTORY ITEMS
  {
    if (type == 0) // look
    {
      player.Say("It's just some junk in my inventory.");
    }
    else if (type == 1) // interact
    {
      player.Say("Er, no?");
    }
    else if (type == 3) // use inv on
    {
      player.Say("That's ridiculous.");
    }
  }
}

function btnInvUp_OnClick(GUIControl *control, MouseButton button)
{
  invCustom.ScrollUp();
}

function btnInvDown_OnClick(GUIControl *control, MouseButton button)
{
  invCustom.ScrollDown();
}

function btnCloseInventory_OnClick(GUIControl *control, MouseButton button)
{
  gInventory.Visible = false;
}

function btnPlay_OnClick(GUIControl *control, MouseButton button)
{
  gExitGame.Visible = false;
}

function btnQuit_OnClick(GUIControl *control, MouseButton button)
{
  QuitGame(0);
}

function VerbCoinButton_OnClick(GUIControl* control, MouseButton button)
{
  // pass click processing back to script module
  VerbCoin.OnClick(control, button);
}

function gVerbCoin_OnClick(GUI *theGui, MouseButton button)
{
  gVerbCoin.Visible = false;
}

function gInventory_OnClick(GUI *theGui, MouseButton button)
{
  if (button == eMouseRight)
  {
    gInventory.Visible = false;
  }
}

function cRoger_UseInv()
{
  player.ActiveInventory.RunInteraction(eModeInteract);
}

function iCup_Interact()
{
  player.Say("I don't think drinking this would be wise.");
}
