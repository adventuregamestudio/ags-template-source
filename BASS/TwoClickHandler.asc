// label to use for text actions
Label* action;

// inventory GUI to use
GUI* interface_inv;

static function TwoClickHandler::RegisterInventoryGui(GUI* inventory_gui)
{
  interface_inv = inventory_gui;
}

static function TwoClickHandler::RegisterActionLabel(Label* label)
{
  action = label;
  action.Text = "";
}

function do_room_action(MouseButton button)
{
  if (GetLocationType(mouse.x, mouse.y) != eLocationNothing)
  {
    // clicked on something
    if (player.ActiveInventory == null)
    {
      if (button == eMouseLeft)
      {
        // left click to interact with target
        Room.ProcessClick(mouse.x, mouse.y, eModeInteract);
      }
      else
      {
        // right click to look at target
        Room.ProcessClick(mouse.x, mouse.y, eModeLookat);
      }
    }
    else
    {
      if (button == eMouseLeft)
      {
        // left click to use inventory on target
        Room.ProcessClick(mouse.x, mouse.y, eModeUseinv);
      }
      else
      {
        // right click to deselect inventory item
        player.ActiveInventory = null;
      }
    }
  }
  else
  {
    // click on nothing
    if (player.ActiveInventory == null && button == eMouseLeft)
    {
      // left click to walk
      Room.ProcessClick(mouse.x, mouse.y, eModeWalkto);
    }
    else
    {
      // right click to deselect inventory item
      player.ActiveInventory = null;
    }
  }
}

function do_inventory_action(MouseButton button, InventoryItem* item)
{ 
  if (button == eMouseLeftInv)
  {  
    if (player.ActiveInventory == null)
    {
      if (item.GetProperty("InstantUse") == true)
      {
        // left click to instant use (if property is set)
        item.RunInteraction(eModeInteract);
      }
      else
      {
        // left click to set active inventory item
        player.ActiveInventory = item;
      }
    }
    else if (item.ID != player.ActiveInventory.ID)
    {
      // left click to use active inventory on another item
      item.RunInteraction(eModeUseinv);
    }
  }
  else
  {
    // right click to look at inventory item
    item.RunInteraction(eModeLookat);
  }
}

//----------------------------------------------------------------------------------------------------
// on_mouse_click()
//----------------------------------------------------------------------------------------------------
function on_mouse_click(MouseButton button)
{
  // when mouse is clicked, text label is cleared
  if (action != null)
  {
    action.Text = "";
  }

  if (!IsGamePaused() && (button == eMouseLeft || button == eMouseRight))
  {
    do_room_action(button);       
  }
  else if (button == eMouseLeftInv || button == eMouseRightInv)
  {
    do_inventory_action(button, InventoryItem.GetAtScreenXY(mouse.x, mouse.y));
  }  
}

//----------------------------------------------------------------------------------------------------
// repeatedly_execute()
//----------------------------------------------------------------------------------------------------
function repeatedly_execute()
{
  // Inventory GUI:
  if (interface_inv == null)
  {
    // pass
  }
  else if (interface_inv.Visible && mouse.y > interface_inv.Height)
  {
    interface_inv.Visible = false;
  }
  else if (!IsGamePaused() && !interface_inv.Visible && mouse.y <= INVENTORY_POPUP_POSITION)
  {
    // make visible when the game is not paused and the cursor is within the popup position
    interface_inv.Visible = true;
  }
  
  // Action Text
  // We always display the name of what is under the mouse, with one exception:
  // IF the player has an inventory item selected and hovers over the same inventory item, 
  // we display nothing to indicate that an item can not be used on itself
  if (player.ActiveInventory == null)
  {
    if (action != null && !IsGamePaused())
    {
      action.Text = Game.GetLocationName(mouse.x, mouse.y);
    }
  }
  else
  {
    InventoryItem *item = InventoryItem.GetAtScreenXY(mouse.x, mouse.y);
    if (action == null)
    {
      // pass
    }
    else if (item != null && item.ID == player.ActiveInventory.ID)
    {
      action.Text = "";
    }
    else
    {
      action.Text = Game.GetLocationName(mouse.x, mouse.y);
    }
  }
}

// handle clicks in the inventory area that are not on an inventory item
function on_event(EventType event, int data) 
{
  if (event == eEventGUIMouseDown &&
    interface_inv != null &&
    data == interface_inv.ID &&
    InventoryItem.GetAtScreenXY(mouse.x, mouse.y) == null)
  {
    GUIControl* control = GUIControl.GetAtScreenXY(mouse.x, mouse.y);
    
    if (control == null || control.AsInvWindow == null)
    {
      // pass
    }
    else if (player.ActiveInventory != null)
    {
      player.ActiveInventory = null;
    }
  }
}
